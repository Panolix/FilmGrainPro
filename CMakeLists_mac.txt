cmake_minimum_required(VERSION 3.20)
project(FilmGrainPro VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Build configuration
set(CMAKE_BUILD_TYPE Debug CACHE STRING "Build type")
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo")

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# macOS specific settings
if(APPLE)
    set(CMAKE_OSX_DEPLOYMENT_TARGET "10.15")
    find_library(OPENGL_LIBRARY OpenGL)
    find_library(COCOA_LIBRARY Cocoa)
    find_library(IOKIT_LIBRARY IOKit)
    find_library(COREVIDEO_LIBRARY CoreVideo)
endif()

# Find packages - use Homebrew paths on macOS
if(APPLE)
    set(CMAKE_PREFIX_PATH "/opt/homebrew;/usr/local" ${CMAKE_PREFIX_PATH})
endif()

find_package(PkgConfig REQUIRED)
find_package(glfw3 REQUIRED)

# Try to find OpenCV
find_package(OpenCV QUIET)
if(NOT OpenCV_FOUND)
    message(STATUS "OpenCV not found, using minimal image implementation")
endif()

# Include nlohmann/json
find_package(nlohmann_json QUIET)
if(NOT nlohmann_json_FOUND)
    message(STATUS "nlohmann_json not found, will use header-only version")
    # Download nlohmann/json header
    include(FetchContent)
    FetchContent_Declare(
        nlohmann_json
        URL https://github.com/nlohmann/json/releases/download/v3.11.2/json.tar.xz
    )
    FetchContent_MakeAvailable(nlohmann_json)
endif()

# Include directories
include_directories(src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# Source files
set(CORE_SOURCES
    src/core/engine.cpp
    src/core/film_stock_database.cpp
    src/core/color_processor.cpp
    src/core/pattern_library.cpp
    src/core/grain_renderer.cpp
)

set(UI_SOURCES
    src/ui/main_window.cpp
)

set(UTILS_SOURCES
    src/utils/image.cpp
    src/utils/performance_monitor.cpp
)

set(ALL_SOURCES ${CORE_SOURCES} ${UI_SOURCES} ${UTILS_SOURCES})

# Create executable
add_executable(FilmGrainPro src/main.cpp ${ALL_SOURCES})

# Link libraries
target_link_libraries(FilmGrainPro glfw)

if(APPLE)
    target_link_libraries(FilmGrainPro 
        ${OPENGL_LIBRARY}
        ${COCOA_LIBRARY}
        ${IOKIT_LIBRARY}
        ${COREVIDEO_LIBRARY}
    )
endif()

if(OpenCV_FOUND)
    target_link_libraries(FilmGrainPro ${OpenCV_LIBS})
    target_compile_definitions(FilmGrainPro PRIVATE HAVE_OPENCV)
endif()

if(nlohmann_json_FOUND)
    target_link_libraries(FilmGrainPro nlohmann_json::nlohmann_json)
else()
    target_link_libraries(FilmGrainPro nlohmann_json)
endif()

# Compiler flags
if(APPLE)
    target_compile_options(FilmGrainPro PRIVATE 
        -Wall -Wextra -Wpedantic
        -Wno-unused-parameter
    )
endif()

# Copy JSON data files to build directory
configure_file(${CMAKE_SOURCE_DIR}/stocks5.json ${CMAKE_BINARY_DIR}/bin/stocks5.json COPYONLY)
configure_file(${CMAKE_SOURCE_DIR}/advanced-shapeetc.json ${CMAKE_BINARY_DIR}/bin/advanced-shapeetc.json COPYONLY)

# Install targets
install(TARGETS FilmGrainPro DESTINATION bin)
install(FILES stocks5.json advanced-shapeetc.json DESTINATION bin)